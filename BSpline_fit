import numpy as np
from scipy import interpolate
import matplotlib.pyplot as plt
from readairfoil import *
from scipy.stats import qmc
from visualization import *

#def BSpline_fit(xu,zu,xl,zl):
    
#------------------------------------------------------------------------------
# Load airfoil
#------------------------------------------------------------------------------
airfoil = 'rae2822' # airfoil .dat name
N = 7 # number of points describing each of the airfoil's upper and lower surfaces
xi = np.arange(N) # generate ascending integers from 0 to 0 to N-1
xdist = 1.0 - np.cos( xi* (np.pi)/2.0/(N - 1.0) ); # generating N-1 x values from 0 to 1 whose distribution follows the formula
xu,zu,xl,zl = readairfoil(airfoil,xdist=xdist) # load airfoil with the following distribution
fig = plt.figure(dpi=(2**8))
    
xu = np.reshape(xu,((len(xu),1)))
zu = np.reshape(zu,((len(zu),1)))
xl = np.reshape(xl,((len(xl),1)))
zl = np.reshape(zl,((len(zl),1)))

# Load airfoil data from file (x, y coordinates)
#airfoil_data = np.loadtxt('airfoil.dat')
us = np.concatenate((xu,zu),axis=1)
ls = np.concatenate((xl,zl),axis=1)

# Define knot vector (uniformly spaced)
knots = np.linspace(0, 1, len(us))

# Define degree of B-spline curve
degree = 3

# Create B-spline object
us_ctrl_pts= interpolate.make_interp_spline(knots, us, k=degree).c
ls_ctrl_pts = interpolate.make_interp_spline(knots, ls, k=degree).c

