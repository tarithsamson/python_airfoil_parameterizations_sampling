.. _PARSEC_parametrization_method:

Parsec Airfoil Parametrization Method
==========================================

Introduction
------------   

The PARSEC airfoil parameterization was developed by Sobieczky in 1998. 

\In the PARSEC method, the upper surface of the airfoil is described by a
sixth order polynomial:

.. math:: z_{u}(x)=\sum_{i=1}^{6} a_{i} x^{i-(1 / 2)},

where :math:`a_{i}, i=1, \ldots, 6`, are the polynomial coefficients,
and :math:`x` is the nondimensional chordwise location,
:math:`0 \leq x \leq 1`. The coefficients, shown in Fig. 7.4, are
determined by six geometrical constraints.

#. Maximum upper surface :math:`z`-coordinate :math:`z_{U}` at
   :math:`x_{U}`, i.e.:

.. math:: z_{u}\left(x_{U}\right)=z_{U}

2. First order derivative is zero at :math:`x_{U}`, i.e.:

.. math:: \left.\frac{d z_{u}}{d x}\right|_{x=x_{U}}=0

3. Prescribed second order derivative :math:`z_{x x U}` at
   :math:`x_{U}`, i.e.:

.. math:: \left.\frac{d^{2} z_{u}}{d x^{2}}\right|_{x=x_{U}}=z_{x x U}

4. Trailing edge (TE) off-set, :math:`t_{\text {off }}`, and thickness,
   :math:`t_{T E}`, i.e.:

.. math:: z_{u}(x=1)=t_{o f f}+\frac{1}{2} t_{T E}

5. TE direction angle, :math:`\theta_{T E}`, and wedge angle,
   :math:`\beta_{T E}`, i.e.:

.. math:: \left.\frac{d z_{u}}{d x}\right|_{x=1}=\tan \left(\theta_{T E}-\frac{1}{2} \beta_{T E}\right)

6. Prescribed LE radius of upper surface, :math:`R_{U}`. A circle at
   :math:`\left(x_{c}, z_{c}\right)` with a radius :math:`R_{U}`, and is
   defined as:

.. math:: \left(x-x_{c}\right)^{2}+\left(z-z_{c}\right)^{2}=R_{U}

Below is a figure showing the geometrical constraints:

.. image:: Images/PARSEC_parameters.png
   :name: fig:my-figure

The LE of the airfoil is at the origin, so
:math:`\left(x_{c}, z_{c}\right)=(0,0)`. We can write:

.. math:: z=\left(2 R_{U}-x\right)^{1 / 2} \cdot x^{1 / 2}

The upper surface polynomial can be written as:

.. math:: z_{u}=a_{1} \cdot x^{1 / 2}+\sum_{i=2}^{6} a_{i} x^{i-(1 / 2)} .

Comparing the two above equations for small :math:`x`, we obtain:

.. math:: a_{1} \cdot x^{1 / 2} \approx\left(2 R_{U}\right)^{1 / 2}

which is the condition that has been met at the LE. The above geometrical
constraints form a linear system of
equations:

.. math:: \boldsymbol {P a=q}

where:

.. math::

   \boldsymbol{P}=\left[\begin{array}{cccccc}
   x_{U}^{1 / 2} & x_{U}^{3 / 2} & x_{U}^{5 / 2} & x_{U}^{7 / 2} & x_{U}^{9 / 2} & x_{U}^{11 / 2} \\
   1 / 2 x_{U}^{-1 / 2} & 3 / 2 x_{U}^{1 / 2} & 5 / 2 x_{U}^{3 / 2} & 7 / 2 x_{U}^{5 / 2} & 9 / 2 x_{U}^{7 / 2} & 11 / 2 x_{U}^{9 / 2} \\
   -1 / 4 x_{U}^{-3 / 2} & 3 / 4 x_{U}^{-1 / 2} & 15 / 4 x_{U}^{1 / 2} & 35 / 4 x_{U}^{3 / 2} & 63 / 4 x_{U}^{5 / 2} & 99 / 4 x_{U}^{7 / 2} \\
   1 & 1 & 1 & 1 & 1 & 1 \\
   1 / 2 & 3 / 2 & 5 / 2 & 7 / 2 & 9 / 2 & 11 / 2 \\
   1 & 0 & 0 & 0 & 0 & 0
   \end{array}\right]

.. math::

   \begin{gathered}
   \boldsymbol{q}=\left[\begin{array}{c}
   z_{U} \\
   0 \\
   z_{x x U} \\
   t_{\text {off }}+1 / 2 t_{T E} \\
   \tan \left(\theta_{T E}-1 / 2 \beta_{T E}\right) \\
   \left(2 R_{U}\right)^{1 / 2}
   \end{array}\right] \\
   \boldsymbol{a}=\left[\begin{array}{lll}
   a_{1} & \cdots & a_{6}
   \end{array}\right]^{T} .
   \end{gathered}

The linear system has a unique solution given by:

.. math:: \boldsymbol {a={P}^{-1} q}

The lower surface is configured in a similar fashion. We have:

.. math:: z_{l}(x)=\sum_{i=1}^{6} b_{i} x^{i-(1 / 2)},

with the following constraints:

.. math::

   \begin{gathered}
   z_{l}\left(x_{L}\right)=z_{L} \\
   \left.\frac{d^{2} z_{l}}{d x^{2}}\right|_{x=x_{L}}=z_{x x L}, \\
   z_{l}(x=1)=t_{\text {off }}-\frac{1}{2} t_{T E},
   \end{gathered}

.. math::

   \begin{gathered}
   \left.\frac{d z_{l}}{d x}\right|_{x=1}=\tan \left(\theta_{T E}+\frac{1}{2} \beta_{T E}\right), \\
   b_{1} \cdot x^{1 / 2} \approx-\left(2 R_{L}\right)^{1 / 2}
   \end{gathered}

The linear system of equations is:

.. math:: \boldsymbol{Eb=v}

where :math:`\mathrm{E}=\mathrm{P}` and

.. math::

   \begin{gathered}
   \boldsymbol{v}=\left[\begin{array}{c}
   z_{L} \\
   0 \\
   z_{x x L} \\
   t_{o f f}-1 / 2 t_{T E} \\
   \tan \left(\theta_{T E}+1 / 2 \beta_{T E}\right) \\
   -\left(2 R_{L}\right)^{1 / 2}
   \end{array}\right] \\
   \boldsymbol{b}=\left[\begin{array}{lll}
   b_{1} & \cdots & b_{6}
   \end{array}\right]^{T} .
   \end{gathered}

The solution to the matrix equation is:

.. math:: \boldsymbol {b={E}^{-1} v}

Altogether, there are 12 parameters in the PARSEC formulation. Some of
the parameters can be fixed during an optimization. For example, setting
:math:`t_{T E}=0` will yield a sharp closed TE. Also, it is possible to
work only on the upper or the lower surface.

PARSEC.py
-----------------------------
This function is used to generate a PARSEC surface given a set of input parameters. 

The input parameters to the PARSEC function are:

- **X**: a 1-D list or array where ``X=[x_U, z_U, z_xxU, R_U, x_L, z_L, z_xxL, R_L, theta_TE, beta_TE]``  
- **N**: an int that specifies the number of points to generate on the upper and lower surfaces
- **xdist**: a 1-D numpy array of x-coordinates at which the upper and lower surfaces are evaluated. If this parameter is not provided, the points will be generated uniformly between 0 and 1.

The outputs of the PARSEC function are:

- **xu**: a 1-D numpy array of the x-coordinates of the upper surface
- **zu**: a 1-D numpy array of the z-coordinates of the upper surface
- **xl**: a 1-D numpy array of the x-coordinates of the lower surface
- **zl**: a 1-D numpy array of the z-coordinates of the lower surface

PARSEC_fit.py
--------------

This function is used to fit PARSEC parameters to a set of airfoil coordinates. 

The input parameters to the PARSEC_fit function are:

- **xu**: a 1-D numpy array of the x-coordinates of the upper surface of the target airfoil
- **zu**: a 1-D numpy array of the z-coordinates of the upper surface of the target airfoil
- **xl**: a 1-D numpy array of the x-coordinates of the lower surface of the target airfoil
- **zl**: a 1-D numpy array of the z-coordinates of the lower surface of the target airfoil


The outputs of the PARSEC function are:

- **X**: a 1-D list or array where ``X=[x_U, z_U, z_xxU, R_U, x_L, z_L, z_xxL, R_L, theta_TE, beta_TE]``


Example: Fitting a PARSEC surface to a RAE2822 and plotting the results
-----------------------------------------------------------------------

Here's an example Python code snippet that uses the PARSEC_fit.py to fit a PARSEC surface to an RAE2822 airfoil:

.. code-block::

   # import packages
   from readairfoil import * 
   from PARSEC_fit import *
   import numpy as np
   import matplotlib.pyplot as plt
   from readairfoil import *

   airfoil = 'rae2822' # airfoil .dat name
   N = 100 # number of points describing each of the airfoil's upper and lower surfaces
   xi = np.arange(N) # generate ascending integers from 0 to 0 to N-1
   xdist = 1.0 - np.cos( xi* (np.pi)/2.0/(N - 1.0) ); # generating N-1 x values from 0 to 1 whose distribution follows the formula
   xu,zu,xl,zl = readairfoil(airfoil,xdist=xdist) # load airfoil with the following distribution

   X = PARSEC_fit(xu,zu,xl,zl,N,xdist) # fit PARSEC surface to airfoil


Below is the resulting plot: 

.. image:: Images/PARSEC_fit_example.png
   :alt: Alternative text
